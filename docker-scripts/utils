
function get_new_sdn_ip() {
  CONTAINER_IP=$1
  i=$2
  SDN_IP=$CONTAINER_IP
  if [ x"$CONTAINER_IP" != x"dhcp" ]; then
    GATEWAY="${CONTAINER_IP#*@}" GATEWAY="${GATEWAY%%@*}"
    IPADDR="${CONTAINER_IP%%@*}"
     echo $IPADDR | grep -q / || {
        echo "The IP address should include a netmask."
        echo "Maybe you meant $IPADDR/24 ?"
        exit 1
    }
    MASK="${IPADDR#*/}"
    IPADDR="${CONTAINER_IP%%/*}" #like 192.168.200.8
    SUFFIX_IP="${IPADDR%.*}" #like 192.168.200
    POSTFIX_IP="${IPADDR##*.}" #like 8 
    POSTFIX_IP=$(expr $POSTFIX_IP + $i - 1)
    SDN_IP=${SUFFIX_IP}.${POSTFIX_IP}/${MASK}@$GATEWAY
  fi
  echo "$SDN_IP"
}

function generate_ssl_certificate_jks() {
  LOCATION=$1
  NAME=$2
  PASSWORD=$3
  # Assume we are using same password when create the keystore
  export KEY_PASSWORD=$PASSWORD
  export PKCS_PASSWORD=$PASSWORD
  export JKS_PASSWORD=$PASSWORD
  mkdir -p $LOCATION
  openssl genrsa -des3 -out ${LOCATION}/${NAME}.key -passout "env:KEY_PASSWORD"
  openssl req -new -x509 -key ${LOCATION}/${NAME}.key \
    -passin "env:KEY_PASSWORD" \
    -out ${LOCATION}/${NAME}-self-signed.pem
  openssl pkcs12 -inkey ${LOCATION}/${NAME}.key \
    -passin "env:KEY_PASSWORD" \
    -name ${NAME} \
    -in ${LOCATION}/${NAME}-self-signed.pem \
    -password "env:PKCS_PASSWORD" \
    -export -out ${LOCATION}/${NAME}.pkcs12
  keytool -importkeystore -srckeystore ${LOCATION}/${NAME}.pkcs12 \
    -srcalias ${NAME} \
    -srcstorepass $PKCS_PASSWORD \
    -srcstoretype PKCS12 \
    -destkeystore ${LOCATION}/${NAME}.jks \
    -deststorepass $JKS_PASSWORD
}
